version: "3"

services:
  fastapi-yolo:
    build:
      context: ./be-fastapi-yolo
    ports:
      - "8000:8000"
    volumes:
      - ./be-fastapi-yolo:/app
    environment:
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - TZ=UTC
    restart: unless-stopped

  fastapi-cnn:
    build:
      context: ./be-fastapi-cnn
    ports:
      - "5000:5000"
    environment:
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - MODEL_PATH=${MODEL_PATH}
      - REDIS_URL=${REDIS_URL}
      # - MINIO_ENDPOINT=minio:9000
      # - MINIO_ACCESS_KEY=minioadmin
      # - MINIO_SECRET_KEY=minioadmin
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=chestscan
      - TZ=UTC
    volumes:
      - ./be-fastapi-cnn:/app
      - ./be-fastapi-cnn/models:/app/models
      - cnn-data:/app/data
    depends_on:
      - minio
      - celery-worker
    restart: unless-stopped

  celery-worker:
    build:
      context: ./be-fastapi-cnn
    command: celery -A celery_config worker -Q prediction_tasks --loglevel=info
    volumes:
      - ./be-fastapi-cnn:/app
      - ./be-fastapi-cnn/models:/app/models
      - cnn-data:/app/data
    environment:
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - MODEL_PATH=${MODEL_PATH:-models/DenseNet121_epoch_30.keras}
      - REDIS_URL=${REDIS_URL}
      # - MINIO_ENDPOINT=minio:9000
      # - MINIO_ACCESS_KEY=minioadmin
      # - MINIO_SECRET_KEY=minioadmin
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=chestscan
      - TZ=UTC

    restart: unless-stopped

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/chestscan --ignore-existing;
      /usr/bin/mc policy set public myminio/chestscan;
      exit 0;
      "

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  prometheus-data:
  grafana-data:
  cnn-data:
  minio-data:
